<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lcomputerstudy.example.mapper.UserMapper">
<!-- 권한 읽기 -->
	<select id="readAuthorities" parameterType="String" resultType="org.springframework.security.core.authority.SimpleGrantedAuthority">
    	SELECT       u_auth
        FROM         lc_auth
        WHERE        1=1
        AND          u_id = #{username}
    </select>
<!-- 회원 불러오기 -->
	<select id="readUser" parameterType="String" resultType="User">
    	SELECT       u_id					    as   username,
			         u_password             		as password,
			         u_name                		as   uName,
			         u_isAccountNonExpired       as isAccountNonExpired,
			         u_isAccountNonLocked    	as isAccountNonLocked,
			         u_isCredentialNonExpired    as isCredentialsNonExpired,
			         u_isEnabled          		as isEnabled,
			         u_level						as uLevel
        FROM         lc_user
        WHERE        1=1
        AND          u_id   =   #{username}
   </select>
<!-- 유저 리스트 -->
	<select id="getUser" parameterType="User">
		SELECT	u_id	as username,
				u_name	as uName,
				u_level	as uLevel
		FROM	lc_user
		LIMIT	#{pageNum}, #{perPage}
	</select>
<!-- 회원 등록 -->
	<insert id="createUser" parameterType="User">
      INSERT INTO lc_user (
         u_id,
         u_password,
         u_name,
         u_isAccountNonExpired,
         u_isAccountNonLocked,
         u_isCredentialNonExpired,
         u_isEnabled,
         u_level
      ) VALUES (
         #{username},
         #{password},
         #{uName},
         #{isAccountNonExpired},
         #{isAccountNonLocked},
         #{isCredentialsNonExpired},
         #{isEnabled},
         #{uLevel}
      )
   </insert> 
<!-- 유저 권한 추가 -->
	<insert id="createAuthority" parameterType="org.springframework.security.core.GrantedAuthority">
       INSERT INTO lc_auth (
          u_id,
          u_auth
       ) VALUES
         <foreach item="authority" index="index" collection="authorities" separator=",">
            (#{username}, #{authority.role})
         </foreach>
         ON DUPLICATE KEY
         UPDATE
            u_id = #{username}
    </insert>
<!-- 유저 auth 업데이트 -->
	<update id="levelupdate" parameterType="org.springframework.security.core.GrantedAuthority">
		UPDATE	lc_auth
		SET		u_auth = 'ROLE_ADMIN'
		WHERE	u_id IN (
			SELECT	u_id
			FROM	lc_user
			WHERE	u_level >= 5
		)
	</update>
<!-- 유저 레벨 -->
	<update id="levelUser">
		UPDATE	lc_user
		SET		u_level = #{uLevel}
		WHERE	u_id = #{username}
	</update>
<!-- 유저 카운트 -->
	<select id="getUserCount" resultType="int">
		SELECT COUNT(*) count
		FROM	lc_user
	</select>
</mapper>